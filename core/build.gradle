dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

//TODO remove when Javadoc errors have been resolved
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

java {
    withJavadocJar()
    withSourcesJar()
}

signing {
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'core'
            from components.java
            pom {
                name = 'TransRAM'
                description = 'Transactional memory semantics for the JVM'
                url = 'https://github.com/obsidiandynamics/transram'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'ekoutanov'
                        name = 'Emil Koutanov'
                        email = 'ekoutanov@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/obsidiandynamics/transram.git'
                    developerConnection = 'scm:git:ssh://github.com/obsidiandynamics/transram.git'
                    url = 'https://github.com/obsidiandynamics/transram'
                }
            }
        }
    }
//    repositories {
////        maven {
////            // local repositories (on disk)
////            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
////            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
////            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
////        }
//        maven {
//            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
//            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
//            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//            credentials {
//                username = findProperty('sonatype.username')
//                password = findProperty('sonatype.password')
//            }
//        }
//    }
}